version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@7.0.0
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3

aws_docker_image: &aws_docker_image
  docker:
    - image: amazon/aws-cli

python_docker_image: &python_docker_image
  docker:
    - image: python:3.7.3-stretch

python_cluster_docker_image: &python_cluster_docker_image
  docker:
    - image: cimg/python:3.10

commands:
  install_aws_cli:
    description: Configure aws cli to deploy resources
    steps:
      - run:
          name: install aws cli
          command: pip install awscli  

jobs:

    build-test-lint:
      <<: *python_docker_image
      working_directory: ~/repo
      steps:
        - checkout
        - restore_cache:
            keys:
              - v1-dependencies-{{ checksum "./app/requirements.txt" }}
              # fallback to using the latest cache if no exact match is found
              - v1-dependencies-
        - run:
            name: set up python
            command: |
                cd ./app
                make setup
        - run:
            name: install dependencies
            command: |
                cd ./app
                make install
        - save_cache:
            paths:
                - ./.devops
            key: v1-dependencies-{{ checksum "./app/requirements.txt" }}
        - run:
            name: run test
            command: |
                cd ./app
                make test
        - run:
            name: run lint
            command: |
              cd ./app
              source .devops/bin/activate
              make lint

    build-and-push-image:
      docker:
        - image: 'cimg/python:3.10'
          user: root
      steps:
        - checkout
        - aws_cli_credentials
        - setup_remote_docker:
            version: 20.10.14
            docker_layer_caching: false
        - run:
            name: run build docker and push to ecr
            command: |
              cd ./app
              docker build . -t uda-capstone-project:${CIRCLE_WORKFLOW_ID:0:7}
              aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin "${ECR_URI}"
              docker tag uda-capstone-project ${ECR_URI}/${ECR_REPO}:${CIRCLE_WORKFLOW_ID:0:7}
              docker push ${ECR_URI}/${ECR_REPO}:${CIRCLE_WORKFLOW_ID:0:7}
  
    deploy-aws-eks:
      <<: *python_cluster_docker_image
      steps:
        - checkout
        - install_aws_cli
        - run:
            name: check if the cluster exist
            command: |

              export VALIDATE=$(aws eks describe-cluster --name ${ENV_NAME}-cluster --query 'cluster.name')
              echo "$VALIDATE" > ~/validate
              if cat ~/validate | grep "${ENV_NAME}-cluster"
              then
                  echo "Cluster ${ENV_NAME}-cluster already exist. Skipping job"
                  circleci-agent step halt
                  exit 0
              else
                  echo "Attempting to create the cluster $ENV_NAME-cluster"
              fi
        - aws-eks/create-cluster:
            cluster-name: ${ENV_NAME}-cluster 
            aws-region: ${AWS_DEFAULT_REGION}
            nodegroup-name: ${ENV_NAME}-workers
            node-type: t3.medium
            nodes-min: 2
            nodes-max: 3
            ssh-access: true
            ssh-public-key: DEFAULT_EKS_US_EAST_2_Key

    deploy-app-in-eks:
      <<: *python_cluster_docker_image
      steps:
        - checkout
        - run:
            name: Create deployment manifest
            command: |
                cat .circleci/files/deployment.yml.template |\
                sed "s|IMAGE_TAG|${CIRCLE_WORKFLOW_ID:0:7}|\
                g;s|ENV_NAME|${ENV_NAME}|g;s|ECR_URI|${ECR_URI}|\
                g;s|VERSION_INFO_VALUE|${CIRCLE_WORKFLOW_ID:0:7}|g" > .circleci/files/deployment.yml

                cat .circleci/files/service.yml.template |\
                sed "s|ENV_NAME|${ENV_NAME}|g" > .circleci/files/service.yml
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: ${ENV_NAME}-cluster
            install-kubectl: true
            aws-region: ${AWS_DEFAULT_REGION}
        - kubernetes/create-or-update-resource:
            get-rollout-status: true
            resource-file-path: ".circleci/files/deployment.yml"
            resource-name: deployment/uda-capstone-project
            show-kubectl-command: true
        - kubernetes/create-or-update-resource:
            resource-file-path: ".circleci/files/service.yml"
        - run:
            name: get deployment status
            command:  kubectl get svc uda-capstone-project

    test-deployment:
      <<: *python_cluster_docker_image
      steps:
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: ${ENV_NAME}-cluster
            install-kubectl: true
            aws-region: ${AWS_DEFAULT_REGION}
        - run:
            name: Wait for service to be ready
            command: |
              kubectl get pods
              kubectl get services
              sleep 30
              for attempt in {1..20}; do
                EXTERNAL_IP=$(kubectl get service uda-capstone-project | awk '{print $4}' | tail -n1)
                echo "Checking external IP: ${EXTERNAL_IP}"
                if [ -n "${EXTERNAL_IP}" ] && [ -z $(echo "${EXTERNAL_IP}" | grep "pending") ]; then
                  break
                fi
                echo "Waiting for external IP to be ready: ${EXTERNAL_IP}"
                sleep 10
              done
              sleep 180
              echo "External IP: ${EXTERNAL_IP}"
              curl -s --retry 10 "http://$EXTERNAL_IP/alive" | grep "Hello, World!"

workflows:
  deploy-application:
    jobs:
      - build-test-lint
      - deploy-aws-eks:
          filters:
            branches:
              only: [main, deploy-infrastructure]
      - build-and-push-image:
          requires: [build-test-lint]
          filters:
            branches:
              only: [main]
      - deploy-app-in-eks:
          requires: [aws-ecr/build-and-push-image, deploy-aws-eks]
          filters:
            branches:
              only: [main]
      - test-deployment:
          requires: [deploy-app-in-eks]
          filters:
            branches:
              only: [main]