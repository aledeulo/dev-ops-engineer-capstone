version: 2.1

aws_docker_image: &aws_docker_image
  docker:
    - image: amazon/aws-cli

python_docker_image: &python_docker_image
  docker:
    - image: python:3.7.3-stretch

commands:
  destroy-environment:
    description: Destroy vpc and eks cloudformation stacks given a workflow ID.    
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
              aws cloudformation delete-stack --stack-name network-stack-${ENV_NAME}
              aws cloudformation delete-stack --stack-name eks-stack-${CIRCLE_WORKFLOW_ID:0:7}

jobs:

    build-test-lint:
      <<: *python_docker_image
      working_directory: ~/repo
      steps:
        - checkout
        - restore_cache:
            keys:
              - v1-dependencies-{{ checksum "./app/requirements.txt" }}
              # fallback to using the latest cache if no exact match is found
              - v1-dependencies-
        - run:
            name: set up python
            command: |
                cd ./app
                make setup
        - run:
            name: install dependencies
            command: |
                cd ./app
                make install
        - save_cache:
            paths:
                - ./.devops
            key: v1-dependencies-{{ checksum "./app/requirements.txt" }}
        - run:
            name: run test
            command: |
                cd ./app
                make test
        - run:
            name: run lint
            command: |
              cd ./app
              source .devops/bin/activate
              make lint
  
    deploy-aws-network:
      <<: *aws_docker_image
      steps:
        - checkout
        - run:
            name: deploy network stack
            command: |
              export SUCCESS=$(aws cloudformation deploy --template-file .circleci/cf-templates/network.yml  \
                              --tags project=dev-ops-engineer-capstone  --stack-name "network-stack-$ENV_NAME"    \
                              --parameter-overrides EnvironmentName="$ENV_NAME")

              echo "$SUCCESS" > ~/result
              if grep -E "Successfully created/updated|No changes to deploy" ~/result
              then
              echo "Successfully created/updated"
              exit 0
              else
              echo "Could not create network stack."
              exit 1
              fi          
            no_output_timeout: 30m

    deploy-aws-eks:
      <<: *aws_docker_image
      steps:
        - checkout
        - run:  
            name: Install tar and gzip
            command: |
              yum install -y tar gzip
        - run:
            name: install eksctl
            command: |
                curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
                mv /tmp/eksctl /usr/local/bin
        - run:
            name: create eks cluster and worker nodes
            command: |
              cd .circleci/scripts
              chmod +x deploy-cluster.sh
              ./deploy-cluster.sh $ENV_NAME
            no_output_timeout: 60m

workflows:
  deploy-application:
    jobs:
      # - build-test-lint
      # - deploy-aws-network:
      #     requires: [build-test-lint]
      #     filters:
      #       branches:
      #         only: [main]
      - deploy-aws-eks:
          # requires: [deploy-aws-network]
          filters:
            branches:
              only: [main]
  