version: 2.1

aws_docker_image: &aws_docker_image
  docker:
    - image: amazon/aws-cli

python_docker_image: &python_docker_image
  docker:
    - image: python:3.7.3-stretch

commands:
  destroy-environment:
    description: Destroy vpc and eks cloudformation stacks given a workflow ID.    
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
              aws cloudformation delete-stack --stack-name eksctl-$ENV_NAME-cluster-cluster-${CIRCLE_WORKFLOW_ID:0:7}

jobs:

    build-test-lint:
      <<: *python_docker_image
      working_directory: ~/repo
      steps:
        - checkout
        - restore_cache:
            keys:
              - v1-dependencies-{{ checksum "./app/requirements.txt" }}
              # fallback to using the latest cache if no exact match is found
              - v1-dependencies-
        - run:
            name: set up python
            command: |
                cd ./app
                make setup
        - run:
            name: install dependencies
            command: |
                cd ./app
                make install
        - save_cache:
            paths:
                - ./.devops
            key: v1-dependencies-{{ checksum "./app/requirements.txt" }}
        - run:
            name: run test
            command: |
                cd ./app
                make test
        - run:
            name: run lint
            command: |
              cd ./app
              source .devops/bin/activate
              make lint
  
    deploy-aws-eks:
      <<: *aws_docker_image
      steps:
        - checkout
        - run:  
            name: Install tar and gzip
            command: |
              yum install -y tar gzip
        - run:
            name: install eksctl
            command: |
                curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
                mv /tmp/eksctl /usr/local/bin
        - run:
            name: install kubectl
            command: |
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" &&\
              curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256" &&\
              echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check &&
              chmod +x kubectl
              mv ./kubectl /usr/local/bin/kubectl
              kubectl version --short --client

        - run:
            name: create eks cluster and worker nodes
            command: |
              cd .circleci/scripts
              chmod +x deploy-cluster.sh
              ./deploy-cluster.sh ${ENV_NAME}
            no_output_timeout: 60m
        - run:
            name: install openSSL
            command: yum install -y openssl
        - run:
            name: install helm
            command: |
              curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > get_helm.sh
              chmod 700 get_helm.sh
              ./get_helm.sh        
        - run:
            name: install load balancer
            command: |           

              export VPC=$(aws ec2 describe-vpcs --region us-east-1 --filters "Name=tag-value,Values=eksctl-${ENV_NAME}-cluster-cluster/VPC" --query 'Vpcs[*].VpcId' --output text)
              export ROLE_NAME=UdaEKSWorkerNode
              export ECR_URI=246528985509.dkr.ecr.us-east-1.amazonaws.com/uda-docker-proj

              #Configure the cluster
              aws eks update-kubeconfig --name ${ENV_NAME}-cluster --region us-east-1

              curl -o iam_policy_latest.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json
              # Create a policy
              aws iam create-policy --policy-name ALBLoadBalancerController --policy-document file://iam_policy_latest.json
              aws eks update-kubeconfig --name $ENV_NAME-cluster --region us-east-1
              # Policy attachment to a role
              aws iam attach-role-policy --policy-arn arn:aws:iam::${AWS_ACCOUNT}:policy/ALBLoadBalancerController --role-name $ROLE_NAME

              helm repo add eks https://aws.github.io/eks-charts
              helm repo update

              kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"

              # To install the Helm chart, run the following command:
              # helm upgrade -i aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system  \
              #       --set region=us-east-1 --set image.repository=${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-load-balancer-controller \
              #       --set clusterName=${ENV_NAME}-cluster --set serviceAccount.create=true \
              #       --set serviceAccount.name=aws-load-balancer-controller




workflows:
  deploy-application:
    jobs:
      # - build-test-lint
      - deploy-aws-eks:
          # requires: [build-test-lint]
          filters:
            branches:
              only: [main]
  